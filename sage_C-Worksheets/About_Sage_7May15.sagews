︠1dff5854-4906-4138-a95a-1975bedce3b1is︠
%md
# Sage Math Cloud
## Learning through experiments

<a href="https://twitter.com/share" class="twitter-share-button" data-url="http://pyas.me/basics/Py_BuiltIn_Func17Mar15_v1.html" data-via="suranands" data-hashtags="Python">Tweet</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>

___Posted by [Anand](http://pyas.me/) | On April 7, 2015___

<a href="http://www.sagemath.org/">
<img src="http://www.sagemath.org/pix/sage-banner-02.png"></a>
︡51ed4b0c-a440-47a6-8c25-a9849b6cddcb︡{"md":"# Sage Math Cloud\n## Learning through experiments\n\n<a href=\"https://twitter.com/share\" class=\"twitter-share-button\" data-url=\"http://pyas.me/basics/Py_BuiltIn_Func17Mar15_v1.html\" data-via=\"suranands\" data-hashtags=\"Python\">Tweet</a>\n<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>\n\n___Posted by [Anand](http://pyas.me/) | On April 7, 2015___\n\n<a href=\"http://www.sagemath.org/\">\n<img src=\"http://www.sagemath.org/pix/sage-banner-02.png\"></a>\n"}︡
︠6a6e2568-1221-4677-b698-cb4261264309is︠
%md
## What is SAGE?

> __Truly, there would be a reason to go mad were it not for music.__

~ __Pyotr Ilyich Tchaikovsky__, the greatest Russian composer.

[Software for Algebra and Geometry Experimentation (Sage)](http://sagemath.org/) is a __Mathematical Software System__. The word _system_ has to be taken seriously. The backbone of Sage is __Python__. However, Sage is a lot more than just a programming software with richer architecture that that of __[IPython](http://ipython.org/)__. Including a lot more than all that you can achieve through IPython, Sage as a robust computational ecosystem creates an entire environment for you with so many features and so much power that, in my knowledge, there is no other tool as comprehensive and powerful as Sage. Although, [Continuum.Io's Anaconda Python Distribution](http://continuum.io/downloads) or [Enthought Python Distribution](https://www.enthought.com/products/epd/) can be sort of like analogies, a bit comparable to what Sage can do. While it is primarly targetted at Mathematicians and those who require high-end scientific analysis, the capabilities of Sage can range from being able to execute normal terminal commands to performing supercomputing calculations.

One doesn't really have to install Sage to realize its true power. A comprehensive experience of Sage is readily accessible in the form of __[Sage Math Cloud](https://cloud.sagemath.com/)__. This simple web app leaves you astonished once you get to know the list of its functional features. The list is too long and way beyond my naive domain knowledge, but I tried below to list a few of the best utilities, which address experts working in pretty much all the verticals and all the domains that involve any range of computational work. As the maker of Sage, [Dr. William Stein](http://www.wstein.org/) modestly puts it, the massive power of Sage is partly from Linux and partly from Python. But ... Sage has a different aim. Sage's Mission statement is,

> __Creating a viable free open source alternative to Magma, Maple, Mathematica and Matlab.__

However, the scope of use with Sage extends way beyond this statement, in my opinion. 

### Sage Math Local

Those who are familian with using IPython should feel at home with Sage on their machines. One of the primary differences is that prompt of Sage on your bash appears as `Sage:` in place of `In[1]` in IPython. The functinality and usage are pretty much the same. One of the major technical differences may be that Sage comes with a collossal set of libraries and modules meant for scientific computing, particularly mathematical computations. Therefore, the next moment after you install Sage, you can directly start importing power packages like SciPy, SymPy, NumPy, MatplotLib, etc. You may be tempted to find this part similar with Anaconda and Enthought Python distributions. The technical differences lie in the heart of Sage development. Sage is developed while deliberately keeping mathematicians and scientists in mind. Therefore, the kind magic commands, functionality extensions, etc. features are implemented at an advanced level. The core differences can be observed by reading Sage Documentation.

As [Ted Kosan](http://www.sagemath.org/library-why.html) explains his reasons for choosing Sage for his classroom teaching-learning as well as scientific research,

> Instead of Python being just a tool among equals like it was in TeXmacs, in SAGE it was elevated to the position of being the means of managing the enormous complexity inherent in these other tools and enabling the power in them to be made available in a way that seemed more natural and effective than the other approaches that I had looked at.

> I went from thinking that the best approach for teaching newbies mathematics software was to hide the source code as much as possible behind a GUI front-end to coming up with a way to teach newbies how to program as easily as possible so that they would be able to effectively use a source code interface.

When it comes to installing Sage, there are the usual bunch of options commonly given by any software developing companies. The installers are divided into OS-specific, user-specific and need-based varieties. The one which I chose is a Debian-based (Linux), build-from-source (DIY), regular tar.gz variety. The installation instructions are given vlearly as an [Installation Guide](http://www.sagemath.org/doc/installation/). If you choose to build it from source and you are a newbie in this field, you may get panicked while looking at your terminal during the installation. Once you type `make` after the said steps in the guide, what you will see your terminal doing is literally Sage's giant vomitting of status messages during installation for over 20-30 minutes depending on your sys config. However, the advantages of building Sage from source code versus using the pre-built Sage are clearly mentioned in the installation guide. 

Your terminal may show you thousands of lines being printed out during installation, but all your work in building Sage from source code is less than 5 lines of commands on terminal, rest everything is perfectly automated. Of course, reading the prerequisites and minimum system requirements for Sage to be installed is highly important before beginning to build. During the rapid-fire installation process, you may randomly attempts to read the lines being printed out, and you may see Sage building up libraires for you on mathematical operations such as Linear Equations System, Scalar Products, etc. One of the best features of Sage can be observed when you type `notebook()` at your Sage prompt. This opens up a Sage Notebook server on your localhost with a GUI very similar to IPython/Jupyter Notebook. Again, the differentiators are vastly significant in Sage, more than in its notebooks. All this keeps me wondering how many people were involved in Sage development. On [Gitter](https://gitter.im/sagemath/cloud), I heard Dr. Stein mentioning that he alone is on top of 95% of Sage development currently. Not just this, to me, everything about Sage appears unbelievable and impossible, but the paradox is, Sage exists.

## What is SAGE MATH CLOUD?

[SageMath Cloud (SMC)](https://cloud.sagemath.com/) is a one-stop shop for your computational necessities. In more technical way, once you sign into SMC, what you have in your web browser is an entire linux machine with its own GUI, dedicated memory and dedicated free hard disk space. 

* Usually, a free account comes with 8 HDD, 8 GB memory __for each project__ inside it, along with all functionalities that Sage gives. 
* Once you create a project, you can create n-number of files, folders, x-scripts (replace x by program name such as Shell, C, C++, C#, Java, Python, Perl, Ruby, Coffee, JS, JSON, XML, HTML, TXT, markdown, css, ... what not!) and executables like `.exe`, `.o`, etc. 
* So many of them are obviously possible through inherent bash terminal which works exactly the way a local terminal works, including rendering text editors like NANO, EMACS and VIM.
* You can install user-specific dependencies and program-specific libraries, such as in python, using `sage -sh` commad followed by `pip --user`,  with slightly different SMC-specific commands. Rest of the teminal usage is no different from any Linux machine.
* You can create and preview Markdown and $/LaTeX/$ files on the fly.
︡5b19ddcc-0c90-4b24-b465-517d1951aa29︡{"md":"## What is SAGE?\n\n> __Truly, there would be a reason to go mad were it not for music.__\n\n~ __Pyotr Ilyich Tchaikovsky__, the greatest Russian composer.\n\n[Software for Algebra and Geometry Experimentation (Sage)](http://sagemath.org/) is a __Mathematical Software System__. The word _system_ has to be taken seriously. The backbone of Sage is __Python__. However, Sage is a lot more than just a programming software with richer architecture that that of __[IPython](http://ipython.org/)__. Including a lot more than all that you can achieve through IPython, Sage as a robust computational ecosystem creates an entire environment for you with so many features and so much power that, in my knowledge, there is no other tool as comprehensive and powerful as Sage. Although, [Continuum.Io's Anaconda Python Distribution](http://continuum.io/downloads) or [Enthought Python Distribution](https://www.enthought.com/products/epd/) can be sort of like analogies, a bit comparable to what Sage can do. While it is primarly targetted at Mathematicians and those who require high-end scientific analysis, the capabilities of Sage can range from being able to execute normal terminal commands to performing supercomputing calculations.\n\nOne doesn't really have to install Sage to realize its true power. A comprehensive experience of Sage is readily accessible in the form of __[Sage Math Cloud](https://cloud.sagemath.com/)__. This simple web app leaves you astonished once you get to know the list of its functional features. The list is too long and way beyond my naive domain knowledge, but I tried below to list a few of the best utilities, which address experts working in pretty much all the verticals and all the domains that involve any range of computational work. As the maker of Sage, [Dr. William Stein](http://www.wstein.org/) modestly puts it, the massive power of Sage is partly from Linux and partly from Python. But ... Sage has a different aim. Sage's Mission statement is,\n\n> __Creating a viable free open source alternative to Magma, Maple, Mathematica and Matlab.__\n\nHowever, the scope of use with Sage extends way beyond this statement, in my opinion. \n\n### Sage Math Local\n\nThose who are familian with using IPython should feel at home with Sage on their machines. One of the primary differences is that prompt of Sage on your bash appears as `Sage:` in place of `In[1]` in IPython. The functinality and usage are pretty much the same. One of the major technical differences may be that Sage comes with a collossal set of libraries and modules meant for scientific computing, particularly mathematical computations. Therefore, the next moment after you install Sage, you can directly start importing power packages like SciPy, SymPy, NumPy, MatplotLib, etc. You may be tempted to find this part similar with Anaconda and Enthought Python distributions. The technical differences lie in the heart of Sage development. Sage is developed while deliberately keeping mathematicians and scientists in mind. Therefore, the kind magic commands, functionality extensions, etc. features are implemented at an advanced level. The core differences can be observed by reading Sage Documentation.\n\nAs [Ted Kosan](http://www.sagemath.org/library-why.html) explains his reasons for choosing Sage for his classroom teaching-learning as well as scientific research,\n\n> Instead of Python being just a tool among equals like it was in TeXmacs, in SAGE it was elevated to the position of being the means of managing the enormous complexity inherent in these other tools and enabling the power in them to be made available in a way that seemed more natural and effective than the other approaches that I had looked at.\n\n> I went from thinking that the best approach for teaching newbies mathematics software was to hide the source code as much as possible behind a GUI front-end to coming up with a way to teach newbies how to program as easily as possible so that they would be able to effectively use a source code interface.\n\nWhen it comes to installing Sage, there are the usual bunch of options commonly given by any software developing companies. The installers are divided into OS-specific, user-specific and need-based varieties. The one which I chose is a Debian-based (Linux), build-from-source (DIY), regular tar.gz variety. The installation instructions are given vlearly as an [Installation Guide](http://www.sagemath.org/doc/installation/). If you choose to build it from source and you are a newbie in this field, you may get panicked while looking at your terminal during the installation. Once you type `make` after the said steps in the guide, what you will see your terminal doing is literally Sage's giant vomitting of status messages during installation for over 20-30 minutes depending on your sys config. However, the advantages of building Sage from source code versus using the pre-built Sage are clearly mentioned in the installation guide. \n\nYour terminal may show you thousands of lines being printed out during installation, but all your work in building Sage from source code is less than 5 lines of commands on terminal, rest everything is perfectly automated. Of course, reading the prerequisites and minimum system requirements for Sage to be installed is highly important before beginning to build. During the rapid-fire installation process, you may randomly attempts to read the lines being printed out, and you may see Sage building up libraires for you on mathematical operations such as Linear Equations System, Scalar Products, etc. One of the best features of Sage can be observed when you type `notebook()` at your Sage prompt. This opens up a Sage Notebook server on your localhost with a GUI very similar to IPython/Jupyter Notebook. Again, the differentiators are vastly significant in Sage, more than in its notebooks. All this keeps me wondering how many people were involved in Sage development. On [Gitter](https://gitter.im/sagemath/cloud), I heard Dr. Stein mentioning that he alone is on top of 95% of Sage development currently. Not just this, to me, everything about Sage appears unbelievable and impossible, but the paradox is, Sage exists.\n\n## What is SAGE MATH CLOUD?\n\n[SageMath Cloud (SMC)](https://cloud.sagemath.com/) is a one-stop shop for your computational necessities. In more technical way, once you sign into SMC, what you have in your web browser is an entire linux machine with its own GUI, dedicated memory and dedicated free hard disk space. \n\n* Usually, a free account comes with 8 HDD, 8 GB memory __for each project__ inside it, along with all functionalities that Sage gives. \n* Once you create a project, you can create n-number of files, folders, x-scripts (replace x by program name such as Shell, C, C++, C#, Java, Python, Perl, Ruby, Coffee, JS, JSON, XML, HTML, TXT, markdown, css, ... what not!) and executables like `.exe`, `.o`, etc. \n* So many of them are obviously possible through inherent bash terminal which works exactly the way a local terminal works, including rendering text editors like NANO, EMACS and VIM.\n* You can install user-specific dependencies and program-specific libraries, such as in python, using `sage -sh` commad followed by `pip --user`,  with slightly different SMC-specific commands. Rest of the teminal usage is no different from any Linux machine.\n* You can create and preview Markdown and $/LaTeX/$ files on the fly.\n"}︡
︠c66ac987-880e-4a52-a9d6-481b569158aa︠









